---
import "@styles/tags.css";

import { type CollectionEntry, getEntry } from "astro:content";

type Tag = CollectionEntry<"tags">;
type Project = CollectionEntry<"projects">;

const project: Project | undefined = Astro.props.project;
const tags: Tag[] | undefined = Astro.props.tags;
/**
  Determines whether to wrap the list items in `<a>` tags.
  Useful when choosing to render tags within a card or by themselves
  @default false
*/
const links: boolean = Astro.props.links || false;
/**
  Centers the tags with `justify-content: center` CSS property.
  Otherwise, it's `justify-content: start`.
*/
const center: boolean = Astro.props.links || false;
---

<style></style>
<ul class={center ? "tags-list center" : "tags-list"}>
  {
    project && (
      <li>
        {links ? (
          <a
            class="tag-pill project"
            href={"/projects/" + project.slug}
            aria-label={project.data.name + " project"}
          >
            {project.data.name}
          </a>
        ) : (
          <span class="tag-pill project">{project.data.name}</span>
        )}
      </li>
    )
  }
  {
    tags &&
      tags.map(async (g: Tag) => {
        const tag: Tag = await getEntry("tags", g.id);
        const inner = links ? (
          <a
            class="tag-pill"
            href={"/tags/" + tag.id}
            aria-label={tag.data.name + " tag"}
          >
            {tag.data.name}
          </a>
        ) : (
          <span class="tag-pill">{tag.data.name}</span>
        );
        return <li>{inner}</li>;
      })
  }
</ul>
